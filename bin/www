#!/usr/bin/env node

/**
 * Module dependencies.
 */


require('dotenv/config');
const app = require('../app');
const debug = require('debug')('galactisee:server');
const http = require('http').Server(app);
const io = require('socket.io')(http);
const request = require('request');

/** Provide sockets
 *
 */
io.on('connection', function(socket){
  socket.on('location_search', function(req){
    let reqUrl = `http://interview.toumetisanalytics.com/location/${req}`;

    request(reqUrl, function (error, response, body) {
      console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received
      socket.emit('location_searchRESP',body);
    });
  });

  socket.on('weather_search', function(req){
    let reqUrl = `http://interview.toumetisanalytics.com/weather/${req}`;

    request(reqUrl, function (error, response, body) {
      console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received

      socket.emit('weather_searchRESP',body);
    });
  })
});
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3300');
app.set('port', port);
console.log("Listening on port " + port);



/**
 * Listen on provided port, on all network interfaces.
 */
http.listen(port);
http.on('error', onError);
http.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr =http.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
